diff --git a/theme/boost/classes/output/mod_quiz_renderer.php b/theme/boost/classes/output/mod_quiz_renderer.php
new file mode 100644
index 0000000000..675deaa84e
--- /dev/null
+++ b/theme/boost/classes/output/mod_quiz_renderer.php
@@ -0,0 +1,178 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Quiz renderer override for theme_boost.
+ *
+ * @package     theme_boost
+ * @author      Donald Barrett <donaldb@skills.org.nz>
+ * @copyright   2022 onwards, Skills Consulting Group Ltd
+ * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+namespace theme_boost\output;
+
+// No direct access.
+use local_quizadditionalbehaviour\quiz;
+use local_quizadditionalbehaviour\quiz_attempt;
+use local_quizadditionalbehaviour\quiz_attempt_nav_panel;
+use local_quizadditionalbehaviour\quiz_review_nav_panel;
+use mod_quiz_renderer as core_mod_quiz_renderer;
+use mod_quiz_display_options as core_mod_quiz_display_options;
+use quiz_nav_panel_base as core_quiz_nav_panel_base;
+use quiz_attempt_nav_panel as core_quiz_attempt_nav_panel;
+use quiz_review_nav_panel as core_quiz_review_nav_panel;
+use quiz_attempt as core_quiz_attempt;
+use html_table;
+use html_table_cell;
+use html_writer;
+use question_display_options;
+use coding_exception;
+
+defined('MOODLE_INTERNAL') || die();
+
+class mod_quiz_renderer extends core_mod_quiz_renderer {
+    public function summary_page($attemptobj, $displayoptions) {
+        $attemptobj = quiz_attempt::create($attemptobj->get_attemptid());
+        return parent::summary_page($attemptobj, $displayoptions);
+    }
+
+    public function summary_table($attemptobj, $displayoptions) {
+        $attemptobj = quiz_attempt::create($attemptobj->get_attemptid());
+        $displayoptions = $attemptobj->get_display_options(false);
+        $lastcompleteattempt = $attemptobj->get_last_complete_attempt();
+        if (empty($lastcompleteattempt)) {
+            // Do the core things.
+            return parent::summary_table($attemptobj, $displayoptions);
+        } else {
+            // Prepare the summary table header.
+            $table = new html_table();
+            $table->attributes['class'] = 'generaltable quizsummaryofattempt boxaligncenter';
+            $table->head = [get_string('question', 'quiz'), get_string('status', 'quiz')];
+            $table->align = ['left', 'left'];
+            $table->size = ['', ''];
+            $markscolumn = $displayoptions->marks >= question_display_options::MARK_AND_MAX;
+            if ($markscolumn) {
+                $table->head[] = get_string('marks', 'quiz');
+                $table->align[] = 'left';
+                $table->size[] = '';
+            }
+            $tablewidth = count($table->align);
+            $table->data = [];
+
+            // Get the summary info for each question.
+            $slots = $attemptobj->get_slots();
+
+            foreach ($slots as $slot) {
+                // Add a section headings if we need one here.
+                $heading = $attemptobj->get_heading_before_slot($slot);
+                if ($heading) {
+                    $cell = new html_table_cell(format_string($heading));
+                    $cell->header = true;
+                    $cell->colspan = $tablewidth;
+                    $table->data[] = [$cell];
+                    $table->rowclasses[] = 'quizsummaryheading';
+                }
+
+                // Don't display information items.
+                if (!$attemptobj->is_real_question($slot)) {
+                    continue;
+                }
+
+                // Real question, show it.
+                $flag = '';
+                if ($attemptobj->is_question_flagged($slot)) {
+                    // Quiz has custom JS manipulating these image tags - so we can't use the pix_icon method here.
+                    $flag = html_writer::empty_tag('img', [
+                        'src' => $this->image_url('i/flagged'),
+                        'alt' => get_string('flagged', 'question'),
+                        'class' => 'questionflag icon-post',
+                    ]);
+                }
+
+                // Change the display of things if this question has been answered correctly.
+                if (!empty($lastcompleteattempt) && isset($lastcompleteattempt[$slot])) {
+                    $questionstatus = get_string('previouslycompleted', 'local_quizadditionalbehaviour');
+                } else {
+                    $questionstatus = $attemptobj->get_question_status($slot, $displayoptions->correctness);
+                }
+                $attemptquestionnumber = $attemptobj->get_question_number($slot) . $flag;
+                $attemptquestionstatus = $attemptobj->get_question_status($slot, $questionstatus);
+                $row = [];
+                if ($attemptobj->can_navigate_to($slot)) {
+                    $row[] = html_writer::link($attemptobj->attempt_url($slot), $attemptquestionnumber);
+                } else {
+                    $row[] = $attemptquestionnumber;
+                }
+                $row[] = $attemptquestionstatus;
+
+                // Continue with the core things.
+                if ($markscolumn) {
+                    $row[] = $attemptobj->get_question_mark($slot);
+                }
+                $table->data[] = $row;
+                $questionstateclass = $attemptobj->get_question_state_class($slot, $displayoptions->correctness);
+                $table->rowclasses[] = 'quizsummary' . $slot . ' ' . $questionstateclass;
+            }
+
+            // Print the summary table.
+            $output = html_writer::table($table);
+
+            return $output;
+        }
+        // Never reached.
+    }
+
+    public function attempt_page($attemptobj, $page, $accessmanager, $messages, $slots, $id, $nextpage) {
+        $attemptobj = quiz_attempt::create($attemptobj->get_attemptid());
+        return parent::attempt_page($attemptobj, $page, $accessmanager, $messages, $slots, $id, $nextpage);
+    }
+
+    public function attempt_form($attemptobj, $page, $slots, $id, $nextpage) {
+        $attemptobj = quiz_attempt::create($attemptobj->get_attemptid());
+        return parent::attempt_form($attemptobj, $page, $slots, $id, $nextpage);
+    }
+
+    public function review_page(
+            core_quiz_attempt $attemptobj,
+            $slots,
+            $page,
+            $showall,
+            $lastpage,
+            core_mod_quiz_display_options $displayoptions,
+            $summarydata
+    ) {
+        $attemptobj = quiz_attempt::create($attemptobj->get_attemptid());
+        $displayoptions = $attemptobj->get_display_options(true);
+        return parent::review_page($attemptobj, $slots, $page, $showall, $lastpage, $displayoptions, $summarydata);
+    }
+
+    public function navigation_panel(core_quiz_nav_panel_base $panel) {
+        $attempt = required_param('attempt', PARAM_INT);
+        $page = optional_param('page', 0, PARAM_INT);
+        $quizattempt = quiz_attempt::create($attempt);
+        $quizdisplayoptions = $quizattempt->get_display_options(true);
+        if ($panel instanceof core_quiz_attempt_nav_panel) {
+            $panel = new quiz_attempt_nav_panel($quizattempt, $quizdisplayoptions, $page, false);
+        } else if ($panel instanceof core_quiz_review_nav_panel) {
+            $panel = new quiz_review_nav_panel($quizattempt, $quizdisplayoptions, $page, false);
+        } else {
+            throw new coding_exception('invalid quiz_attempt_navpanel');
+        }
+
+        return parent::navigation_panel($panel);
+    }
+}
\ No newline at end of file
diff --git a/theme/boost/renderers.php b/theme/boost/renderers.php
new file mode 100644
index 0000000000..4614541cbf
--- /dev/null
+++ b/theme/boost/renderers.php
@@ -0,0 +1,166 @@
+<?php
+// This file is part of Moodle - http://moodle.org/
+//
+// Moodle is free software: you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation, either version 3 of the License, or
+// (at your option) any later version.
+//
+// Moodle is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
+
+/**
+ * Render overrides for theme_boost.
+ *
+ * @package     theme_boost
+ * @author      Donald Barrett <donaldb@skills.org.nz>
+ * @copyright   2022 onwards, Skills Consulting Group Ltd
+ * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
+ */
+
+// No direct access.
+defined('MOODLE_INTERNAL') || die();
+
+require_once($CFG->dirroot.'/question/engine/renderer.php');
+
+class theme_boost_core_question_renderer extends \core_question_renderer {
+    public function question(
+        question_attempt $qa,
+        qbehaviour_renderer $behaviouroutput,
+        qtype_renderer $qtoutput,
+        question_display_options $options,
+        $number) {
+        // Custom question rendering.
+        if (isset($options->displayAnswerOnly) && $options->displayAnswerOnly) {
+            return $this->formulation($qa, $behaviouroutput, $qtoutput, $options);
+        }
+
+        $stateclass = $qa->get_state_class($options->correctness && $qa->has_marks());
+        if (isset($options->passed)) {
+            $stateclass = 'corecode correctness correct';
+        }
+
+        $output = '';
+        if (isset($options->passed) && isset($options->passed_question) && $options->passed_question) {
+            $output .= html_writer::start_tag('div', [
+                'id' => $options->passed_question->get_outer_question_div_unique_id(),
+                'class' => implode(' ', [
+                    'que',
+                    $options->passed_question->get_question(false)->get_type_name(),
+                    $options->passed_question->get_behaviour_name(),
+                    $stateclass,
+                ]),
+            ]);
+        } else {
+            // This is part of the original working.
+            $output .= html_writer::start_tag('div', array(
+                'id' => $qa->get_outer_question_div_unique_id(),
+                'class' => implode(' ', array(
+                    'que',
+                    $qa->get_question(false)->get_type_name(),
+                    $qa->get_behaviour_name(),
+                    $stateclass,
+                )),
+            ));
+        }
+
+        if (isset($options->passed)) {
+            $output .= html_writer::start_tag('div', array('class' => 'info'));
+            $output .= '';
+            $output .= $this->number($number);
+            $output .= html_writer::tag('div', get_string('previouslycompleted', 'local_quizadditionalbehaviour'),
+                array('class' => 'state'));
+            $output .= $this->edit_question_link($qa, $options);
+            $output .= html_writer::end_tag('div');
+        } else {
+            $output .= html_writer::tag('div',
+                $this->info($qa, $behaviouroutput, $qtoutput, $options, $number),
+                array('class' => 'info'));
+        }
+
+        $output .= html_writer::start_tag('div', array('class' => 'content'));
+
+        $question = $qa->get_question();
+        if (isset($options->passed)) {
+            $output .= html_writer::start_tag('div', array('class' => 'formulation'));
+            $output .= html_writer::tag('div', $this->add_part_heading($qtoutput->formulation_heading(), get_string('alreadyansweredcorrectly', 'local_quizadditionalbehaviour')), array('class' => ''));
+
+            if (isset($options->passed_question) && $options->passed_question) {
+                $output .= html_writer::start_tag('div', array('class' => 'hidden'));
+                $output .= $this->formulation($options->passed_question, $behaviouroutput, $qtoutput, $options);
+                $output .= html_writer::end_tag('div');
+                $output .= html_writer::end_tag('div');
+                $passed_question_options = $options;
+                $passed_question_options->readonly = true;
+                $output .= html_writer::tag('div', $this->formulation($options->passed_question, $behaviouroutput, $qtoutput, $passed_question_options), array('class' => 'formulation clearfix'));
+            } else {
+                $output .= html_writer::start_tag('div', array('class' => 'hidden'));
+                $output .= $this->formulation($qa, $behaviouroutput, $qtoutput, $options);
+                $output .= html_writer::end_tag('div');
+                $output .= html_writer::end_tag('div');
+            }
+        } else {
+            $output .= html_writer::tag('div',
+                $this->add_part_heading($qtoutput->formulation_heading(),
+                    $this->formulation($qa, $behaviouroutput, $qtoutput, $options)),
+                array('class' => 'formulation clearfix'));
+            if (isset($options->viewprevanswers) && $options->viewprevanswers === 1 && $number !== "i") {
+                $output .= html_writer::start_tag('div', array('class' => 'clearfix formulation'));
+                $output .= '<p><a class="btn btn-primary" data-toggle="collapse" href="#collapsePrevQuestions' . $number .
+                    '" aria-expanded="false" aria-controls="collapsePrevQuestions' . $number . '">View Previous Attempts</a></p>';
+                $output .= html_writer::start_tag('div', array('class' => 'collapse', 'id' => "collapsePrevQuestions" . $number));
+                $output .= html_writer::start_tag('div', array('class' => 'card card-body'));
+                foreach ($options->prevanswers as $key => $value) {
+                    $output .= "<b>Attempt " . ($key + 1) . "</b>";
+                    $output .= $value;
+                }
+                $output .= html_writer::end_tag('div');
+                $output .= html_writer::end_tag('div');
+                $output .= html_writer::end_tag('div');
+            }
+            if (isset($options->viewcustomgrading) && $options->viewcustomgrading === 1 && $number !== "i") {
+                if ($qa->has_manual_comment() || $options->manualcommentlink) {
+
+                    $context = [
+                        'questionno' => $number,
+                        'attemptid' => $options->quizattemptid,
+                        'has_manual_comment' => $qa->has_manual_comment(),
+                        'manual_comment' => ($qa->has_manual_comment() ? get_string('commentx', 'question', $qa->get_behaviour()->format_comment(null, null, $options->context)) : ''),
+                        'slot' => $qa->get_slot(),
+                        'sesskey' => sesskey(),
+                        'has_grader_info' => isset($question->graderinfo),
+                        'grader_info' => (isset($question->graderinfo) ?
+                            $question->format_text(
+                                $question->graderinfo, $question->graderinfo, $qa, get_class($question->qtype),
+                                'graderinfo', $question->id) :
+                            ""),
+                        'manualcommentlink' => $options->manualcommentlink,
+                        'manual_comment_fields' => ($options->manualcommentlink ? $behaviouroutput->manual_comment_fields($qa, $options) : ''),
+                    ];
+                    $output .= $this->render_from_template('local_quizadditionalbehaviour/grading_grade', $context);
+                }
+            } else {
+                $output .= html_writer::nonempty_tag('div',
+                    $this->add_part_heading(get_string('comments', 'question'),
+                        $this->manual_comment($qa, $behaviouroutput, $qtoutput, $options)),
+                    array('class' => 'comment clearfix'));
+            }
+            $output .= html_writer::nonempty_tag('div',
+                $this->add_part_heading(get_string('feedback', 'question'),
+                    $this->outcome($qa, $behaviouroutput, $qtoutput, $options)),
+                array('class' => 'outcome clearfix'));
+            $output .= html_writer::nonempty_tag('div',
+                $this->response_history($qa, $behaviouroutput, $qtoutput, $options),
+                array('class' => 'history clearfix border p-2'));
+        }
+
+        $output .= html_writer::end_tag('div');
+        $output .= html_writer::end_tag('div');
+        return $output;
+    }
+}
\ No newline at end of file
